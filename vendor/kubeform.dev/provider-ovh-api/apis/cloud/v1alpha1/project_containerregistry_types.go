/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type ProjectContainerregistry struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ProjectContainerregistrySpec   `json:"spec,omitempty"`
	Status            ProjectContainerregistryStatus `json:"status,omitempty"`
}

type ProjectContainerregistrySpecPlanFeatures struct {
	// Vulnerability scanning
	// +optional
	Vulnerability *bool `json:"vulnerability,omitempty" tf:"vulnerability"`
}

type ProjectContainerregistrySpecPlanRegistryLimits struct {
	// Docker image storage limits in bytes
	// +optional
	ImageStorage *int64 `json:"imageStorage,omitempty" tf:"image_storage"`
	// Parallel requests on Docker image API (/v2 Docker registry API)
	// +optional
	ParallelRequest *int64 `json:"parallelRequest,omitempty" tf:"parallel_request"`
}

type ProjectContainerregistrySpecPlan struct {
	// Plan code from catalog
	// +optional
	Code *string `json:"code,omitempty" tf:"code"`
	// Plan creation date
	// +optional
	CreatedAt *string `json:"createdAt,omitempty" tf:"created_at"`
	// Features of the plan
	// +optional
	Features []ProjectContainerregistrySpecPlanFeatures `json:"features,omitempty" tf:"features"`
	// Plan ID
	// +optional
	ID *string `json:"ID,omitempty" tf:"id"`
	// Plan name
	// +optional
	Name *string `json:"name,omitempty" tf:"name"`
	// Container registry limits
	// +optional
	RegistryLimits []ProjectContainerregistrySpecPlanRegistryLimits `json:"registryLimits,omitempty" tf:"registry_limits"`
	// Plan last update date
	// +optional
	UpdatedAt *string `json:"updatedAt,omitempty" tf:"updated_at"`
}

type ProjectContainerregistrySpec struct {
	State *ProjectContainerregistrySpecResource `json:"state,omitempty" tf:"-"`

	Resource ProjectContainerregistrySpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`
}

type ProjectContainerregistrySpecResource struct {
	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// Registry creation date
	// +optional
	CreatedAt *string `json:"createdAt,omitempty" tf:"created_at"`
	// Registry name
	Name *string `json:"name" tf:"name"`
	// Plan of the registry
	// +optional
	Plan []ProjectContainerregistrySpecPlan `json:"plan,omitempty" tf:"plan"`
	// Plan ID of the registry.
	// +optional
	PlanID *string `json:"planID,omitempty" tf:"plan_id"`
	// Project ID of your registry
	// +optional
	ProjectID *string `json:"projectID,omitempty" tf:"project_id"`
	// Region of the registry.
	Region      *string `json:"region" tf:"region"`
	ServiceName *string `json:"serviceName" tf:"service_name"`
	// Current size of the registry (bytes)
	// +optional
	Size *int64 `json:"size,omitempty" tf:"size"`
	// Registry status
	// +optional
	Status *string `json:"status,omitempty" tf:"status"`
	// Registry last update date
	// +optional
	UpdatedAt *string `json:"updatedAt,omitempty" tf:"updated_at"`
	// Access url of the registry
	// +optional
	Url *string `json:"url,omitempty" tf:"url"`
	// Version of your registry
	// +optional
	Version *string `json:"version,omitempty" tf:"version"`
}

type ProjectContainerregistryStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// ProjectContainerregistryList is a list of ProjectContainerregistrys
type ProjectContainerregistryList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of ProjectContainerregistry CRD objects
	Items []ProjectContainerregistry `json:"items,omitempty"`
}
