/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type ProjectNetworkPrivate struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ProjectNetworkPrivateSpec   `json:"spec,omitempty"`
	Status            ProjectNetworkPrivateStatus `json:"status,omitempty"`
}

type ProjectNetworkPrivateSpecRegionsStatus struct {
	// +optional
	Region *string `json:"region,omitempty" tf:"region"`
	Status *string `json:"status" tf:"status"`
}

type ProjectNetworkPrivateSpec struct {
	State *ProjectNetworkPrivateSpecResource `json:"state,omitempty" tf:"-"`

	Resource ProjectNetworkPrivateSpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`
}

type ProjectNetworkPrivateSpecResource struct {
	ID string `json:"id,omitempty" tf:"id,omitempty"`

	Name *string `json:"name" tf:"name"`
	// +optional
	Regions []string `json:"regions,omitempty" tf:"regions"`
	// +optional
	RegionsStatus []ProjectNetworkPrivateSpecRegionsStatus `json:"regionsStatus,omitempty" tf:"regions_status"`
	// Service name of the resource representing the id of the cloud project.
	ServiceName *string `json:"serviceName" tf:"service_name"`
	// +optional
	Status *string `json:"status,omitempty" tf:"status"`
	// +optional
	Type *string `json:"type,omitempty" tf:"type"`
	// +optional
	VlanID *int64 `json:"vlanID,omitempty" tf:"vlan_id"`
}

type ProjectNetworkPrivateStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// ProjectNetworkPrivateList is a list of ProjectNetworkPrivates
type ProjectNetworkPrivateList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of ProjectNetworkPrivate CRD objects
	Items []ProjectNetworkPrivate `json:"items,omitempty"`
}
