/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type ProjectUser struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ProjectUserSpec   `json:"spec,omitempty"`
	Status            ProjectUserStatus `json:"status,omitempty"`
}

type ProjectUserSpecRoles struct {
	// +optional
	Description *string `json:"description,omitempty" tf:"description"`
	// +optional
	ID *string `json:"ID,omitempty" tf:"id"`
	// +optional
	Name *string `json:"name,omitempty" tf:"name"`
	// +optional
	Permissions []string `json:"permissions,omitempty" tf:"permissions"`
}

type ProjectUserSpec struct {
	State *ProjectUserSpecResource `json:"state,omitempty" tf:"-"`

	Resource ProjectUserSpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	SecretRef *core.LocalObjectReference `json:"secretRef,omitempty" tf:"-"`

	BackendRef *core.LocalObjectReference `json:"backendRef,omitempty" tf:"-"`
}

type ProjectUserSpecResource struct {
	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// +optional
	CreationDate *string `json:"creationDate,omitempty" tf:"creation_date"`
	// +optional
	Description *string `json:"description,omitempty" tf:"description"`
	// +optional
	OpenstackRc map[string]string `json:"openstackRc,omitempty" tf:"openstack_rc"`
	// +optional
	Password *string `json:"-" sensitive:"true" tf:"password"`
	// +optional
	RoleName *string `json:"roleName,omitempty" tf:"role_name"`
	// +optional
	RoleNames []string `json:"roleNames,omitempty" tf:"role_names"`
	// +optional
	Roles []ProjectUserSpecRoles `json:"roles,omitempty" tf:"roles"`
	// Service name of the resource representing the id of the cloud project.
	ServiceName *string `json:"serviceName" tf:"service_name"`
	// +optional
	Status *string `json:"status,omitempty" tf:"status"`
	// +optional
	Username *string `json:"username,omitempty" tf:"username"`
}

type ProjectUserStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// ProjectUserList is a list of ProjectUsers
type ProjectUserList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of ProjectUser CRD objects
	Items []ProjectUser `json:"items,omitempty"`
}
