/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type ProjectNetworkPrivateSubnet struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ProjectNetworkPrivateSubnetSpec   `json:"spec,omitempty"`
	Status            ProjectNetworkPrivateSubnetStatus `json:"status,omitempty"`
}

type ProjectNetworkPrivateSubnetSpecIpPools struct {
	// +optional
	Dhcp *bool `json:"dhcp,omitempty" tf:"dhcp"`
	// +optional
	End *string `json:"end,omitempty" tf:"end"`
	// +optional
	Network *string `json:"network,omitempty" tf:"network"`
	// +optional
	Region *string `json:"region,omitempty" tf:"region"`
	// +optional
	Start *string `json:"start,omitempty" tf:"start"`
}

type ProjectNetworkPrivateSubnetSpec struct {
	State *ProjectNetworkPrivateSubnetSpecResource `json:"state,omitempty" tf:"-"`

	Resource ProjectNetworkPrivateSubnetSpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	BackendRef *core.LocalObjectReference `json:"backendRef,omitempty" tf:"-"`
}

type ProjectNetworkPrivateSubnetSpecResource struct {
	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// +optional
	Cidr *string `json:"cidr,omitempty" tf:"cidr"`
	// +optional
	Dhcp *bool   `json:"dhcp,omitempty" tf:"dhcp"`
	End  *string `json:"end" tf:"end"`
	// +optional
	GatewayIP *string `json:"gatewayIP,omitempty" tf:"gateway_ip"`
	// +optional
	IpPools   []ProjectNetworkPrivateSubnetSpecIpPools `json:"ipPools,omitempty" tf:"ip_pools"`
	Network   *string                                  `json:"network" tf:"network"`
	NetworkID *string                                  `json:"networkID" tf:"network_id"`
	// +optional
	NoGateway *bool   `json:"noGateway,omitempty" tf:"no_gateway"`
	Region    *string `json:"region" tf:"region"`
	// Service name of the resource representing the id of the cloud project.
	ServiceName *string `json:"serviceName" tf:"service_name"`
	Start       *string `json:"start" tf:"start"`
}

type ProjectNetworkPrivateSubnetStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// ProjectNetworkPrivateSubnetList is a list of ProjectNetworkPrivateSubnets
type ProjectNetworkPrivateSubnetList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of ProjectNetworkPrivateSubnet CRD objects
	Items []ProjectNetworkPrivateSubnet `json:"items,omitempty"`
}
