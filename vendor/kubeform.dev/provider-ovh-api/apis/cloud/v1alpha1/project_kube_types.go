/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type ProjectKube struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ProjectKubeSpec   `json:"spec,omitempty"`
	Status            ProjectKubeStatus `json:"status,omitempty"`
}

type ProjectKubeSpec struct {
	State *ProjectKubeSpecResource `json:"state,omitempty" tf:"-"`

	Resource ProjectKubeSpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	SecretRef *core.LocalObjectReference `json:"secretRef,omitempty" tf:"-"`

	BackendRef *core.LocalObjectReference `json:"backendRef,omitempty" tf:"-"`
}

type ProjectKubeSpecResource struct {
	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// +optional
	ControlPlaneIsUpToDate *bool `json:"controlPlaneIsUpToDate,omitempty" tf:"control_plane_is_up_to_date"`
	// +optional
	IsUpToDate *bool `json:"isUpToDate,omitempty" tf:"is_up_to_date"`
	// +optional
	Kubeconfig *string `json:"-" sensitive:"true" tf:"kubeconfig"`
	// +optional
	Name *string `json:"name,omitempty" tf:"name"`
	// +optional
	NextUpgradeVersions []string `json:"nextUpgradeVersions,omitempty" tf:"next_upgrade_versions"`
	// +optional
	NodesURL *string `json:"nodesURL,omitempty" tf:"nodes_url"`
	// +optional
	PrivateNetworkID *string `json:"privateNetworkID,omitempty" tf:"private_network_id"`
	Region           *string `json:"region" tf:"region"`
	ServiceName      *string `json:"serviceName" tf:"service_name"`
	// +optional
	Status *string `json:"status,omitempty" tf:"status"`
	// +optional
	UpdatePolicy *string `json:"updatePolicy,omitempty" tf:"update_policy"`
	// +optional
	Url *string `json:"url,omitempty" tf:"url"`
	// +optional
	Version *string `json:"version,omitempty" tf:"version"`
}

type ProjectKubeStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// ProjectKubeList is a list of ProjectKubes
type ProjectKubeList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of ProjectKube CRD objects
	Items []ProjectKube `json:"items,omitempty"`
}
