/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type ServerInstallTask struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ServerInstallTaskSpec   `json:"spec,omitempty"`
	Status            ServerInstallTaskStatus `json:"status,omitempty"`
}

type ServerInstallTaskSpecDetails struct {
	// Template change log details
	// +optional
	// Deprecated
	ChangeLog *string `json:"changeLog,omitempty" tf:"change_log"`
	// Set up the server using the provided hostname instead of the default hostname
	// +optional
	CustomHostname *string `json:"customHostname,omitempty" tf:"custom_hostname"`
	// +optional
	DiskGroupID *int64 `json:"diskGroupID,omitempty" tf:"disk_group_id"`
	// +optional
	InstallRtm *bool `json:"installRtm,omitempty" tf:"install_rtm"`
	// +optional
	InstallSQLServer *bool `json:"installSQLServer,omitempty" tf:"install_sql_server"`
	// language
	// +optional
	Language *string `json:"language,omitempty" tf:"language"`
	// +optional
	NoRaid *bool `json:"noRaid,omitempty" tf:"no_raid"`
	// Indicate the URL where your postinstall customisation script is located
	// +optional
	PostInstallationScriptLink *string `json:"postInstallationScriptLink,omitempty" tf:"post_installation_script_link"`
	// indicate the string returned by your postinstall customisation script on successful execution. Advice: your script should return a unique validation string in case of succes. A good example is 'loh1Xee7eo OK OK OK UGh8Ang1Gu'
	// +optional
	PostInstallationScriptReturn *string `json:"postInstallationScriptReturn,omitempty" tf:"post_installation_script_return"`
	// +optional
	ResetHwRaid *bool `json:"resetHwRaid,omitempty" tf:"reset_hw_raid"`
	// +optional
	SoftRaidDevices *int64 `json:"softRaidDevices,omitempty" tf:"soft_raid_devices"`
	// Name of the ssh key that should be installed. Password login will be disabled
	// +optional
	SshKeyName *string `json:"sshKeyName,omitempty" tf:"ssh_key_name"`
	// Use the distribution's native kernel instead of the recommended OVH Kernel
	// +optional
	UseDistribKernel *bool `json:"useDistribKernel,omitempty" tf:"use_distrib_kernel"`
	// +optional
	UseSpla *bool `json:"useSpla,omitempty" tf:"use_spla"`
}

type ServerInstallTaskSpec struct {
	State *ServerInstallTaskSpecResource `json:"state,omitempty" tf:"-"`

	Resource ServerInstallTaskSpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	BackendRef *core.LocalObjectReference `json:"backendRef,omitempty" tf:"-"`
}

type ServerInstallTaskSpecResource struct {
	Timeouts *base.ResourceTimeout `json:"timeouts,omitempty" tf:"timeouts"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// If set, reboot the server on the specified boot id during destroy phase
	// +optional
	BootidOnDestroy *int64 `json:"bootidOnDestroy,omitempty" tf:"bootid_on_destroy"`
	// Details of this task
	// +optional
	Comment *string `json:"comment,omitempty" tf:"comment"`
	// +optional
	Details *ServerInstallTaskSpecDetails `json:"details,omitempty" tf:"details"`
	// Completion date
	// +optional
	DoneDate *string `json:"doneDate,omitempty" tf:"done_date"`
	// Function name
	// +optional
	Function *string `json:"function,omitempty" tf:"function"`
	// Last update
	// +optional
	LastUpdate *string `json:"lastUpdate,omitempty" tf:"last_update"`
	// Partition scheme name.
	// +optional
	PartitionSchemeName *string `json:"partitionSchemeName,omitempty" tf:"partition_scheme_name"`
	// The internal name of your dedicated server.
	ServiceName *string `json:"serviceName" tf:"service_name"`
	// Task Creation date
	// +optional
	StartDate *string `json:"startDate,omitempty" tf:"start_date"`
	// Task status
	// +optional
	Status *string `json:"status,omitempty" tf:"status"`
	// Template name
	TemplateName *string `json:"templateName" tf:"template_name"`
}

type ServerInstallTaskStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// ServerInstallTaskList is a list of ServerInstallTasks
type ServerInstallTaskList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of ServerInstallTask CRD objects
	Items []ServerInstallTask `json:"items,omitempty"`
}
