/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	"unsafe"

	jsoniter "github.com/json-iterator/go"
	"github.com/modern-go/reflect2"
)

func GetEncoder() map[string]jsoniter.ValEncoder {
	return map[string]jsoniter.ValEncoder{
		jsoniter.MustGetKind(reflect2.TypeOf(IploadbalancingSpecPlan{}).Type1()): IploadbalancingSpecPlanCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(HttpFarmSpecProbe{}).Type1()):       HttpFarmSpecProbeCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(HttpRouteSpecAction{}).Type1()):     HttpRouteSpecActionCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(TcpFarmSpecProbe{}).Type1()):        TcpFarmSpecProbeCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(TcpRouteSpecAction{}).Type1()):      TcpRouteSpecActionCodec{},
	}
}

func GetDecoder() map[string]jsoniter.ValDecoder {
	return map[string]jsoniter.ValDecoder{
		jsoniter.MustGetKind(reflect2.TypeOf(IploadbalancingSpecPlan{}).Type1()): IploadbalancingSpecPlanCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(HttpFarmSpecProbe{}).Type1()):       HttpFarmSpecProbeCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(HttpRouteSpecAction{}).Type1()):     HttpRouteSpecActionCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(TcpFarmSpecProbe{}).Type1()):        TcpFarmSpecProbeCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(TcpRouteSpecAction{}).Type1()):      TcpRouteSpecActionCodec{},
	}
}

func getEncodersWithout(typ string) map[string]jsoniter.ValEncoder {
	origMap := GetEncoder()
	delete(origMap, typ)
	return origMap
}

func getDecodersWithout(typ string) map[string]jsoniter.ValDecoder {
	origMap := GetDecoder()
	delete(origMap, typ)
	return origMap
}

// +k8s:deepcopy-gen=false
type IploadbalancingSpecPlanCodec struct {
}

func (IploadbalancingSpecPlanCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*IploadbalancingSpecPlan)(ptr) == nil
}

func (IploadbalancingSpecPlanCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*IploadbalancingSpecPlan)(ptr)
	var objs []IploadbalancingSpecPlan
	if obj != nil {
		objs = []IploadbalancingSpecPlan{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(IploadbalancingSpecPlan{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (IploadbalancingSpecPlanCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*IploadbalancingSpecPlan)(ptr) = IploadbalancingSpecPlan{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []IploadbalancingSpecPlan

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(IploadbalancingSpecPlan{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*IploadbalancingSpecPlan)(ptr) = objs[0]
			} else {
				*(*IploadbalancingSpecPlan)(ptr) = IploadbalancingSpecPlan{}
			}
		} else {
			*(*IploadbalancingSpecPlan)(ptr) = IploadbalancingSpecPlan{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj IploadbalancingSpecPlan

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(IploadbalancingSpecPlan{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*IploadbalancingSpecPlan)(ptr) = obj
		} else {
			*(*IploadbalancingSpecPlan)(ptr) = IploadbalancingSpecPlan{}
		}
	default:
		iter.ReportError("decode IploadbalancingSpecPlan", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type HttpFarmSpecProbeCodec struct {
}

func (HttpFarmSpecProbeCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*HttpFarmSpecProbe)(ptr) == nil
}

func (HttpFarmSpecProbeCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*HttpFarmSpecProbe)(ptr)
	var objs []HttpFarmSpecProbe
	if obj != nil {
		objs = []HttpFarmSpecProbe{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(HttpFarmSpecProbe{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (HttpFarmSpecProbeCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*HttpFarmSpecProbe)(ptr) = HttpFarmSpecProbe{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []HttpFarmSpecProbe

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(HttpFarmSpecProbe{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*HttpFarmSpecProbe)(ptr) = objs[0]
			} else {
				*(*HttpFarmSpecProbe)(ptr) = HttpFarmSpecProbe{}
			}
		} else {
			*(*HttpFarmSpecProbe)(ptr) = HttpFarmSpecProbe{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj HttpFarmSpecProbe

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(HttpFarmSpecProbe{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*HttpFarmSpecProbe)(ptr) = obj
		} else {
			*(*HttpFarmSpecProbe)(ptr) = HttpFarmSpecProbe{}
		}
	default:
		iter.ReportError("decode HttpFarmSpecProbe", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type HttpRouteSpecActionCodec struct {
}

func (HttpRouteSpecActionCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*HttpRouteSpecAction)(ptr) == nil
}

func (HttpRouteSpecActionCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*HttpRouteSpecAction)(ptr)
	var objs []HttpRouteSpecAction
	if obj != nil {
		objs = []HttpRouteSpecAction{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(HttpRouteSpecAction{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (HttpRouteSpecActionCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*HttpRouteSpecAction)(ptr) = HttpRouteSpecAction{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []HttpRouteSpecAction

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(HttpRouteSpecAction{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*HttpRouteSpecAction)(ptr) = objs[0]
			} else {
				*(*HttpRouteSpecAction)(ptr) = HttpRouteSpecAction{}
			}
		} else {
			*(*HttpRouteSpecAction)(ptr) = HttpRouteSpecAction{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj HttpRouteSpecAction

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(HttpRouteSpecAction{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*HttpRouteSpecAction)(ptr) = obj
		} else {
			*(*HttpRouteSpecAction)(ptr) = HttpRouteSpecAction{}
		}
	default:
		iter.ReportError("decode HttpRouteSpecAction", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type TcpFarmSpecProbeCodec struct {
}

func (TcpFarmSpecProbeCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*TcpFarmSpecProbe)(ptr) == nil
}

func (TcpFarmSpecProbeCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*TcpFarmSpecProbe)(ptr)
	var objs []TcpFarmSpecProbe
	if obj != nil {
		objs = []TcpFarmSpecProbe{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(TcpFarmSpecProbe{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (TcpFarmSpecProbeCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*TcpFarmSpecProbe)(ptr) = TcpFarmSpecProbe{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []TcpFarmSpecProbe

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(TcpFarmSpecProbe{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*TcpFarmSpecProbe)(ptr) = objs[0]
			} else {
				*(*TcpFarmSpecProbe)(ptr) = TcpFarmSpecProbe{}
			}
		} else {
			*(*TcpFarmSpecProbe)(ptr) = TcpFarmSpecProbe{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj TcpFarmSpecProbe

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(TcpFarmSpecProbe{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*TcpFarmSpecProbe)(ptr) = obj
		} else {
			*(*TcpFarmSpecProbe)(ptr) = TcpFarmSpecProbe{}
		}
	default:
		iter.ReportError("decode TcpFarmSpecProbe", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type TcpRouteSpecActionCodec struct {
}

func (TcpRouteSpecActionCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*TcpRouteSpecAction)(ptr) == nil
}

func (TcpRouteSpecActionCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*TcpRouteSpecAction)(ptr)
	var objs []TcpRouteSpecAction
	if obj != nil {
		objs = []TcpRouteSpecAction{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(TcpRouteSpecAction{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (TcpRouteSpecActionCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*TcpRouteSpecAction)(ptr) = TcpRouteSpecAction{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []TcpRouteSpecAction

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(TcpRouteSpecAction{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*TcpRouteSpecAction)(ptr) = objs[0]
			} else {
				*(*TcpRouteSpecAction)(ptr) = TcpRouteSpecAction{}
			}
		} else {
			*(*TcpRouteSpecAction)(ptr) = TcpRouteSpecAction{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj TcpRouteSpecAction

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(TcpRouteSpecAction{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*TcpRouteSpecAction)(ptr) = obj
		} else {
			*(*TcpRouteSpecAction)(ptr) = TcpRouteSpecAction{}
		}
	default:
		iter.ReportError("decode TcpRouteSpecAction", "unexpected JSON type")
	}
}
