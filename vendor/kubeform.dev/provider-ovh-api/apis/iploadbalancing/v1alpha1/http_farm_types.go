/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type HttpFarm struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              HttpFarmSpec   `json:"spec,omitempty"`
	Status            HttpFarmStatus `json:"status,omitempty"`
}

type HttpFarmSpecProbe struct {
	// +optional
	ForceSsl *bool `json:"forceSsl,omitempty" tf:"force_ssl"`
	// +optional
	Interval *int64 `json:"interval,omitempty" tf:"interval"`
	// +optional
	Match *string `json:"match,omitempty" tf:"match"`
	// +optional
	Method *string `json:"method,omitempty" tf:"method"`
	// +optional
	Negate *bool `json:"negate,omitempty" tf:"negate"`
	// +optional
	Pattern *string `json:"pattern,omitempty" tf:"pattern"`
	// +optional
	Port *int64  `json:"port,omitempty" tf:"port"`
	Type *string `json:"type" tf:"type"`
	// +optional
	Url *string `json:"url,omitempty" tf:"url"`
}

type HttpFarmSpec struct {
	State *HttpFarmSpecResource `json:"state,omitempty" tf:"-"`

	Resource HttpFarmSpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	BackendRef *core.LocalObjectReference `json:"backendRef,omitempty" tf:"-"`
}

type HttpFarmSpecResource struct {
	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// +optional
	Balance *string `json:"balance,omitempty" tf:"balance"`
	// +optional
	DisplayName *string `json:"displayName,omitempty" tf:"display_name"`
	// +optional
	Port *int64 `json:"port,omitempty" tf:"port"`
	// +optional
	Probe       *HttpFarmSpecProbe `json:"probe,omitempty" tf:"probe"`
	ServiceName *string            `json:"serviceName" tf:"service_name"`
	// +optional
	Stickiness *string `json:"stickiness,omitempty" tf:"stickiness"`
	// +optional
	VrackNetworkID *int64  `json:"vrackNetworkID,omitempty" tf:"vrack_network_id"`
	Zone           *string `json:"zone" tf:"zone"`
}

type HttpFarmStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// HttpFarmList is a list of HttpFarms
type HttpFarmList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of HttpFarm CRD objects
	Items []HttpFarm `json:"items,omitempty"`
}
