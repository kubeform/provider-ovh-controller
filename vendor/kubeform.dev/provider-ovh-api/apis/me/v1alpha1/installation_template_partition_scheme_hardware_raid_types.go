/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type InstallationTemplatePartitionSchemeHardwareRaid struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              InstallationTemplatePartitionSchemeHardwareRaidSpec   `json:"spec,omitempty"`
	Status            InstallationTemplatePartitionSchemeHardwareRaidStatus `json:"status,omitempty"`
}

type InstallationTemplatePartitionSchemeHardwareRaidSpec struct {
	State *InstallationTemplatePartitionSchemeHardwareRaidSpecResource `json:"state,omitempty" tf:"-"`

	Resource InstallationTemplatePartitionSchemeHardwareRaidSpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`
}

type InstallationTemplatePartitionSchemeHardwareRaidSpecResource struct {
	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// Disk List. Syntax is cX:dY for disks and [cX:dY,cX:dY] for groups. With X and Y resp. the controller id and the disk id
	Disks []string `json:"disks" tf:"disks"`
	// RAID mode (raid0, raid1, raid10, raid5, raid50, raid6, raid60)
	Mode *string `json:"mode" tf:"mode"`
	// Hardware RAID name
	Name *string `json:"name" tf:"name"`
	// name of this partitioning scheme
	SchemeName *string `json:"schemeName" tf:"scheme_name"`
	// Specifies the creation order of the hardware RAID
	Step *int64 `json:"step" tf:"step"`
	// Template name
	TemplateName *string `json:"templateName" tf:"template_name"`
}

type InstallationTemplatePartitionSchemeHardwareRaidStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// InstallationTemplatePartitionSchemeHardwareRaidList is a list of InstallationTemplatePartitionSchemeHardwareRaids
type InstallationTemplatePartitionSchemeHardwareRaidList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of InstallationTemplatePartitionSchemeHardwareRaid CRD objects
	Items []InstallationTemplatePartitionSchemeHardwareRaid `json:"items,omitempty"`
}
