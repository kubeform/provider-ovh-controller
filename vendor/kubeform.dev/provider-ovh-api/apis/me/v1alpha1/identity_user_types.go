/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type IdentityUser struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              IdentityUserSpec   `json:"spec,omitempty"`
	Status            IdentityUserStatus `json:"status,omitempty"`
}

type IdentityUserSpec struct {
	State *IdentityUserSpecResource `json:"state,omitempty" tf:"-"`

	Resource IdentityUserSpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	SecretRef *core.LocalObjectReference `json:"secretRef,omitempty" tf:"-"`

	BackendRef *core.LocalObjectReference `json:"backendRef,omitempty" tf:"-"`
}

type IdentityUserSpecResource struct {
	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// Creation date of this user
	// +optional
	Creation *string `json:"creation,omitempty" tf:"creation"`
	// User description
	// +optional
	Description *string `json:"description,omitempty" tf:"description"`
	// User's email
	Email *string `json:"email" tf:"email"`
	// User's group
	// +optional
	Group *string `json:"group,omitempty" tf:"group"`
	// Last update of this user
	// +optional
	LastUpdate *string `json:"lastUpdate,omitempty" tf:"last_update"`
	// User's login suffix
	Login *string `json:"login" tf:"login"`
	// User's password
	Password *string `json:"-" sensitive:"true" tf:"password"`
	// When the user changed his password for the last time
	// +optional
	PasswordLastUpdate *string `json:"passwordLastUpdate,omitempty" tf:"password_last_update"`
	// Current user's status
	// +optional
	Status *string `json:"status,omitempty" tf:"status"`
}

type IdentityUserStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// IdentityUserList is a list of IdentityUsers
type IdentityUserList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of IdentityUser CRD objects
	Items []IdentityUser `json:"items,omitempty"`
}
